@page "/"
@using MumbleSharp
@using System.Drawing
@using System.Linq
@using System.Net
@using MumbleSharp.Model
@using TreeNode = Mumblent.TreeNode
<h1>Hello, world!</h1>

@if (connection?.State != ConnectionStates.Connected)
{
    <input type="text" @bind="connectionAddress" class="form-control" />
    <input type="number" @bind="connectionPort" class="form-control" />
    <input type="text" @bind="connectionUsername" class="form-control" />
    <input type="text" @bind="connectionPassword" class="form-control" />
    <button class="btn btn-success" @onclick="btnConnect_Click">Connect</button>
}
else 
{
    <button class="btn btn-danger" @onclick="btnDisconnect_Click">Disconnect</button>


    @if (connection != null)
    {
        <p>Mumble Connection</p>
        <p>State: @connection.State.ToString()</p>
        <p>Recording State: @RecordingText</p>
        <button class="btn btn-warning" @onclick="btnRecord_Click">Send Voice</button>
        <input @onchange="UpdateMsgText" class="form-control"/>
        <button class="btn btn-warning" @onclick="btnSend_Click">Send</button>

        <div class="row">
            <div class="col-6">
                <p>Users</p>
                <ul>
                    @foreach (var node in _tvUsers.Nodes)
                    {
                        <li>@node.Text
                            <ul>
                                @foreach (var subNode in node.Nodes)
                                {
                                    <li>@subNode.Text</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </div>
            <div class="col-6">
                <p>Log</p>
                <ul>
                    @foreach (var log in _tbLog)
                    {
                        <li>@log</li>
                    }
                </ul>
            </div>
        </div>
    }

}

@code {
    
    private string connectionAddress { get; set; } = "localhost";
    private int connectionPort { get; set; } = 64738;
    private string connectionUsername { get; set; } = Guid.NewGuid().ToString();
    private string connectionPassword { get; set; } = "sk";
    
    
    private string MessageText { get; set; } = "Hello, world!";
    private string RecordingText { get; set; } = "Non-Initialized";
    
    private readonly TreeNode _tvUsers = new();
    private readonly List<string> _tbLog = new();

    MumbleConnection? connection;
    MicrophoneRecorder? recorder;
    SpeakerPlayback? playback;
    ConnectionMumbleProtocol? protocol;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        protocol = new ConnectionMumbleProtocol
        {
            channelMessageReceivedDelegate = ChannelMessageReceivedDelegate,
            personalMessageReceivedDelegate = PersonalMessageReceivedDelegate,
            encodedVoice = EncodedVoiceDelegate,
            userJoinedDelegate = UserJoinedDelegate,
            userStateChangedDelegate = UserStateChangedDelegate,
            userStateChannelChangedDelegate = UserStateChannelChangedDelegate,
            userLeftDelegate = UserLeftDelegate,
            channelJoinedDelegate = ChannelJoinedDelegate,
            channelLeftDelegate = ChannelLeftDelegate,
            serverConfigDelegate = ServerConfigDelegate
        };

        playback = new SpeakerPlayback();

        recorder = new MicrophoneRecorder(protocol);
    }



    UserInfo GetUserInfo(User user)
    {
        return new UserInfo
        {
            Id = user.Id,
            Deaf = user.Deaf,
            Muted = user.Muted,
            SelfDeaf = user.SelfDeaf,
            SelfMuted = user.SelfMuted,
            Supress = user.Suppress,
            Channel = user.Channel.Id
        };
    }

    ChannelInfo GetChannelInfo(Channel channel)
    {
        return new ChannelInfo
        {
            Name = channel.Name,
            Id = channel.Id,
            Parent = channel.Parent
        };
    }

    TreeNode? GetUserNode(uint user_id, TreeNode rootNode)
    {
        foreach (TreeNode node in rootNode.Nodes)
        {
            if (node is TreeNode<UserInfo>)
                if (((TreeNode<UserInfo>)node).Value.Id == user_id)
                    return node;
            if (node is TreeNode<ChannelInfo>)
            {
                TreeNode? subNode = GetUserNode(user_id, node);
                if (subNode != null) return subNode;
            }
        }

        return null;
    }

    TreeNode? GetChannelNode(uint channel_id, TreeNode rootNode)
    {
        if (rootNode is TreeNode<ChannelInfo>)
            if (((TreeNode<ChannelInfo>)rootNode).Value.Id == channel_id)
                return rootNode;

        foreach (TreeNode node in rootNode.Nodes)
        {
            if (node is TreeNode<ChannelInfo>)
            {
                if (((TreeNode<ChannelInfo>)node).Value.Id == channel_id)
                    return node;

                TreeNode? subNode = GetChannelNode(channel_id, node);
                if (subNode != null) return subNode;
            }
        }

        return null;
    }

    TreeNode<ChannelInfo> MakeChannelNode(Channel channel)
    {
        TreeNode<ChannelInfo> result = new TreeNode<ChannelInfo>();
        result.Text = channel.Name;
        result.BackColor = Color.LightBlue;
        result.Value = GetChannelInfo(channel);

        return result;
    }

    TreeNode<UserInfo> MakeUserNode(User user)
    {
        TreeNode<UserInfo> result = new TreeNode<UserInfo>();
        result.Text = user.Name;
        result.BackColor = Color.LightGreen;
        result.Value = GetUserInfo(user);

        return result;
    }

    bool DeleteUserNode(uint user_id, TreeNode rootNode)
    {
        TreeNode<UserInfo>? user = null;

        foreach (TreeNode node in rootNode.Nodes)
        {
            if (node is TreeNode<UserInfo>)
                if (((TreeNode<UserInfo>)node).Value.Id == user_id)
                {
                    user = node as TreeNode<UserInfo>;
                    break;
                }

            if (node is TreeNode<ChannelInfo>)
            {
                if (DeleteUserNode(user_id, node))
                    return true;
            }
        }

        if (user != null)
        {
            user.Remove();
            return true;
        }

        return false;
    }

    bool DeleteChannelNode(uint channel_id, TreeNode rootNode)
    {
        if (rootNode is TreeNode<ChannelInfo>)
            if (((TreeNode<ChannelInfo>)rootNode).Value.Id == channel_id)
            {
                rootNode.Remove();
                return true;
            }

        TreeNode? channelNode = null;

        foreach (TreeNode node in rootNode.Nodes)
        {
            if (node is TreeNode<ChannelInfo>)
            {
                if (((TreeNode<ChannelInfo>)node).Value.Id == channel_id)
                {
                    channelNode = node;
                    break;
                }

                if (DeleteUserNode(channel_id, node))
                    return true;
            }
        }

        if (channelNode != null)
        {
            channelNode.Remove();
            return true;
        }

        return false;
    }

    private void btnSend_Click()
    {
        string message = MessageText;
        Channel? target = protocol?.LocalUser.Channel;
        _tbLog.Add($"[{DateTime.Now:HH:mm:ss}] {protocol?.LocalUser.Name} to {protocol?.LocalUser.Channel.Name}: {message}\n");

        if (string.IsNullOrWhiteSpace(message)) return;
        if (target == null) return;
        if (protocol?.LocalUser == null) return;
        
        var msg = new MumbleProto.TextMessage
        {
            Actor = protocol.LocalUser.Id,
            Message = MessageText,
        };
        if (msg.ChannelIds == null)
            msg.ChannelIds = new uint[] { target.Id };
        else
            msg.ChannelIds = msg.ChannelIds.Concat(new uint[] { target.Id }).ToArray();

        connection?.SendControl(MumbleSharp.Packets.PacketType.TextMessage, msg);
        MessageText = "";
        StateHasChanged(); 
    }

    //--------------------------

    void EncodedVoiceDelegate(BasicMumbleProtocol proto, byte[] data, uint userId, long sequence, MumbleSharp.Audio.Codecs.IVoiceCodec codec, MumbleSharp.Audio.SpeechTarget target)
    {
        User? user = proto.Users.FirstOrDefault(u => u.Id == userId);
        AddPlayback(user);

        TreeNode<UserInfo>? userNode = null;
        foreach (TreeNode<ChannelInfo> chanelNode in _tvUsers.Nodes)
        {
            foreach (TreeNode<UserInfo> subNode in chanelNode.Nodes.OfType<TreeNode<UserInfo>>())
            {
                if (subNode.Value.Id == user?.Id)
                    userNode = subNode;
            }

            if (userNode != null)
            {
                break;
            }
        }

        if (userNode != null)
        {
            //TODO: IDFK
           // tvUsers.AddNotifyingNode(userNode, " [SPEAK]", TimeSpan.FromMilliseconds(500));
        }
    }

    void ChannelJoinedDelegate(BasicMumbleProtocol proto, Channel channel)
    {
        TreeNode<ChannelInfo>? channelNode = null;
        if (_tvUsers.Nodes.Count > 0)
            channelNode = (TreeNode<ChannelInfo>)GetChannelNode(channel.Id, _tvUsers.Nodes[0])!;

        if (channelNode == null)
        {
            channelNode = MakeChannelNode(channel);

            TreeNode<ChannelInfo>? channeParentlNode = null;
            if (channel.Id > 0)
            {
                if (_tvUsers.Nodes.Count > 0)
                    channeParentlNode = (TreeNode<ChannelInfo>)GetChannelNode(channel.Parent, _tvUsers.Nodes[0])!;
            }

            if (channeParentlNode == null)
                _tvUsers.Nodes.Add(channelNode);
            else
                channeParentlNode.Nodes.Add(channelNode);
        }
    }

    void ChannelLeftDelegate(BasicMumbleProtocol proto, Channel channel)
    {
        DeleteChannelNode(channel.Id, _tvUsers.Nodes[0]);
    }

    void UserJoinedDelegate(BasicMumbleProtocol proto, User user)
    {
        TreeNode<UserInfo> userNode = MakeUserNode(user);

        TreeNode? channelNode = GetChannelNode(user.Channel.Id, _tvUsers.Nodes[0]);
        if (channelNode == null)
        {
            channelNode = MakeChannelNode(user.Channel);

            TreeNode? parentChannelNode = GetChannelNode(user.Channel.Parent, _tvUsers.Nodes[0]);
            parentChannelNode?.Nodes.Add(channelNode);
        }

        channelNode.Nodes.Add(userNode);
    }

    void UserStateChangedDelegate(BasicMumbleProtocol proto, User user)
    {
        TreeNode<UserInfo>? userNode = (TreeNode<UserInfo>?)GetUserNode(user.Id, _tvUsers.Nodes[0]);

        if (userNode == null)
        {
            //Just for safety:
            //this should never happen as the UserJoinedDelegate should have already been called
            //therefore the userNode should always exist when UserStateChangedDelegate is called
            UserJoinedDelegate(proto, user);
        }
        else
        {
            userNode.Value = GetUserInfo(user);
        }
    }

    void UserStateChannelChangedDelegate(BasicMumbleProtocol proto, User user, uint oldChannelId)
    {
        TreeNode<UserInfo>? userNode = (TreeNode<UserInfo>?)GetUserNode(user.Id, _tvUsers.Nodes[0]);

        if (userNode == null) return;
        
        GetChannelNode(oldChannelId, _tvUsers.Nodes[0])?
            .Nodes.Remove(userNode);

        GetChannelNode(user.Channel.Id, _tvUsers.Nodes[0])?
            .Nodes.Add(userNode);
    }

    private void AddPlayback(User? user)
    {
        if (user == null) return;
        if (user.Id != connection?.Protocol?.LocalUser?.Id)
            SpeakerPlayback.AddPlayer(user.Id, user.Voice);
    }

    void UserLeftDelegate(BasicMumbleProtocol proto, User user)
    {
        DeleteUserNode(user.Id, _tvUsers.Nodes[0]);

        SpeakerPlayback.RemovePlayer(user.Id);
    }

    void ChannelMessageReceivedDelegate(BasicMumbleProtocol proto, ChannelMessage message)
    {
        if (message.Channel.Equals(proto.LocalUser.Channel))
            _tbLog.Add($"[{DateTime.Now:HH:mm:ss}] {message.Sender.Name} to {message.Channel.Name}: {message.Text}\n");
        StateHasChanged();
    }

    void PersonalMessageReceivedDelegate(BasicMumbleProtocol proto, PersonalMessage message)
    {
        _tbLog.Add($"[{DateTime.Now:HH:mm:ss}] {message.Sender.Name} to you: {message.Text}\n");
        StateHasChanged();
    }

    void ServerConfigDelegate(BasicMumbleProtocol proto, MumbleProto.ServerConfig serverConfig)
    {
        _tbLog.Add($"[{DateTime.Now:HH:mm:ss}] Server Config: {serverConfig.WelcomeText}\n");
        StateHasChanged();
    }

    private void btnRecord_Click()
    {
        if (recorder == null) return;
        if (recorder._recording)
        {
            RecordingText = "record";
            recorder.Stop();
        }
        else
        {
            RecordingText = "stop";
            recorder.Record();
        }
    }
    
    private async void btnConnect_Click()
    {

        if (connection != null)
        {
            connection.Close();
            connection = null;
            protocol?.Close();
            _tvUsers.Nodes.Clear();
            _tbLog.Clear();
        }

        connection = new MumbleConnection(new IPEndPoint(Dns.GetHostAddresses(connectionAddress).First(a => a.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork), connectionPort), protocol);
        connection.Connect( connectionUsername, connectionPassword, Array.Empty<string>(), "");

        while (connection?.State == ConnectionStates.Connected)
        {
            if (connection?.Process() ?? false)
                await Task.Yield();
            else
                await Task.Delay(1);
        }
    }

    private void btnDisconnect_Click()
    {
        if (connection == null)
            return;
        
        connection.Close();
        connection = null;
        protocol?.Close();
        _tvUsers.Nodes.Clear();
        _tbLog.Clear();
        
        StateHasChanged();
    }

    private void UpdateMsgText(ChangeEventArgs e)
    {
        MessageText = e.Value?.ToString() ?? "";
    }

}
