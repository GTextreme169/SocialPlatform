@using SocialPlatform.Client.Shared.Components
<div id="channel-list">
    <select id="server-menu" class="text-medium">
        <option>foo</option>
        <option>bar</option>
        <option>fubar</option>
    </select>
    <div id="content">
        @foreach (var channel in TopLevelChannels)
        {
            @RenderChannel(channel)
            <div class="sub-channels">
                @foreach (var subChannel in channel.SubChannels)
                {
                    @RenderChannel(subChannel)
                }
            </div>
        }
    </div>
    <div id="voice-controls">
        <UserStatus/>
        <button type="button">
            <img src="_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Microphone.svg" alt="Microphone Icon" class="icon-small"/>
        </button>
        <button type="button">
            <img src="_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Headphones.svg" alt="Headphone Icon" class="icon-small"/>
        </button>
        <button type="button">
            <img src="_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Gear.svg" alt="Settings Icon" class="icon-small"/>
        </button>
    </div>
</div>

@code {
    
    private RenderFragment RenderChannel(Channel channel)
    {
        return
            @<div class="channel @(SelectedChannelId == channel.Id ? "active":"")" @onclick="() => GoToChannel(channel)">
                <img class="icon-small" src="@GetChannelIconUrl(channel)" alt="Channel Icon"/>
                <span>@channel.Name</span>
            </div>;
    }
    
    [Parameter]
    public List<Data.ChannelData> Channels { get; set; }
    
    [Parameter]
    public EventCallback<string> ChannelClicked { get; set; } = EventCallback<string>.Empty;
    
    [Parameter]
    public string? SelectedChannelId { get; set; }


    public class Channel
    {
        public enum ChannelType
        {
            Custom,
            Text,
            Voice
        }
        public string Id { get; set; } = String.Empty;
        public string Name { get; set; } = String.Empty;
        public ChannelType Type { get; set; } = ChannelType.Text;
        public List<Channel> SubChannels { get; set; } = new();
    }

    public List<Channel> TopLevelChannels { get; set; } = new();

    private void GoToChannel(Channel channel)
    {
        ChannelClicked.InvokeAsync(channel.Id);
    }
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        RebuildChannelList();
    }

    private void RebuildChannelList()
    {
        TopLevelChannels.Clear();
        Queue<Data.ChannelData> channelQueue = new();
        // Step 1: Add all top level channels
        foreach (var channel in Channels)
        {
            if (channel.ParentId == null)
            {
                TopLevelChannels.Add(new Channel
                {
                    Id = channel.Id,
                    Name = channel.Name,
                    Type = GetChannelType(channel.Type)
                });
            }else channelQueue.Enqueue(channel);
        }
        
        // Step 2: Add all sub channels
        int initialQueueCount = channelQueue.Count;
        int processedCount =0;
        while (channelQueue.Count > 0 && processedCount < initialQueueCount*2)
        {
            var channel = channelQueue.Dequeue();
            var parentChannel = TopLevelChannels.Find(c => c.Id == channel.ParentId);
            if (parentChannel != null)
            {
                parentChannel.SubChannels.Add(new Channel
                {
                    Id = channel.Id,
                    Name = channel.Name,
                    Type = GetChannelType(channel.Type)
                }); 
            }
            else
            {
                // If the parent channel is not found, add it to the queue to be processed later
                channelQueue.Enqueue(channel);
            }
            
            processedCount++;
        }
        if (channelQueue.Count > 0)
        {
            // If there are still channels in the queue, we have a circular reference or a missing parent channel
            // This is a problem that should be handled
            Console.WriteLine("Circular reference or invalid parent detected");
            Console.WriteLine("Queue count: " + channelQueue.Count);
            Console.WriteLine("Processed count: " + processedCount);
        }
    }
    
    private Channel.ChannelType GetChannelType(string type)
    {
        return type switch
        {
            "Text" => Channel.ChannelType.Text,
            "Voice" => Channel.ChannelType.Voice,
            _ => Channel.ChannelType.Custom
        };
    }

    public string GetChannelIconUrl(Channel channel)
    {
        return channel.Type switch
        {
            Channel.ChannelType.Text => "_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Hash.svg" ,
            Channel.ChannelType.Voice => "_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Speaker.svg" ,
            _ => "_content/SocialPlatform.Client.Shared/img/SocialPlatform_icons/Plus.svg"
        };
    }
}

