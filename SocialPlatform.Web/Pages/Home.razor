@page "/"

@inject IJSRuntime JSRuntime

@using System.Net.WebSockets

<PageTitle>Home</PageTitle>

<h1>Current State: @client.State.ToString()</h1>
<h1>Muted: @Muted</h1>

@code {
    
    static bool Muted  { get; set; } = false;
    private static ClientWebSocket client = new ClientWebSocket();

    Task ConnectionLoop { get; set; }
    
    [JSInvokable("ProcessAudioFromMicrophone")]
    public static async Task ProcessAudioFromMicrophone(IJSStreamReference stream)
    {
        Console.WriteLine("Data available");
        // if (Muted) return;
        // if (client.State == WebSocketState.Open) return;
        
        // Read the data from the stream
        var buffer = new byte[stream.Length];
        var read = await stream.OpenReadStreamAsync();
        await read.ReadAsync(buffer);
        
        
        Console.WriteLine("Sending " + buffer.Length + " bytes");
        await client.SendAsync(new ArraySegment<byte>(buffer), WebSocketMessageType.Binary, true, System.Threading.CancellationToken.None);
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    return;


        ConnectionLoop = Task.Run(async () =>
        {
            try
            {
                // Connect to localhost 25556
                //await client.ConnectAsync(new Uri("ws://localhost:25556"), System.Threading.CancellationToken.None);
                
                
                Console.WriteLine("Connected");
                StateHasChanged();
                while (true)
                {
                    // Read the data from the server
                    byte[] buffer = new byte[1024];
                    var result = await client.ReceiveAsync(new ArraySegment<byte>(buffer), System.Threading.CancellationToken.None);
                    
                    Console.WriteLine("Received " + result.Count + " bytes");
                    
                    // Convert the data to audio using NAudio
                    using (var waveOut = new NAudio.Wave.WaveOutEvent())
                    {
                        waveOut.Init(new NAudio.Wave.RawSourceWaveStream(new System.IO.MemoryStream(buffer), new NAudio.Wave.WaveFormat(44100, 2)));
                        waveOut.Play();
                        while (waveOut.PlaybackState == NAudio.Wave.PlaybackState.Playing)
                        {
                            await Task.Delay(10);
                        }
                    }
                    
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
            finally
            {
                client.Dispose();
            }
        });
    }

}